Index: app/src/main/java/de/monokel/frontend/provider/Alarm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.monokel.frontend.provider;\r\n\r\nimport de.monokel.frontend.MainActivity;\r\n\r\n/**\r\n * This class has the method which is called once a day.\r\n *\r\n * @author Miftari\r\n */\r\npublic class Alarm {\r\n\r\n    /**\r\n     * This method is called once a day.\r\n     */\r\n    public static void dailyBusiness() {\r\n        //delete all keys older then 3 weeks.\r\n        LocalKeySafer.addKeyPairToSavedKeyPairs(null);\r\n        LocalNotificationSafer.addNotificationToSavedNotifications(null);\r\n\r\n        //update current risk status (traffic light and risk status title) on main screen\r\n        MainActivity.showTrafficLightStatus();\r\n        MainActivity.showRiskStatus();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/de/monokel/frontend/provider/Alarm.java	(revision e4618ad821391a3f21e7e4248b8078a2cf3ba725)
+++ app/src/main/java/de/monokel/frontend/provider/Alarm.java	(date 1604349256633)
@@ -1,6 +1,9 @@
 package de.monokel.frontend.provider;
 
 import de.monokel.frontend.MainActivity;
+import de.monokel.frontend.risklevel.AmountOfContactsEnum;
+import de.monokel.frontend.risklevel.RiskLevel;
+import de.monokel.frontend.risklevel.TypeOfExposureEnum;
 
 /**
  * This class has the method which is called once a day.
@@ -20,5 +23,29 @@
         //update current risk status (traffic light and risk status title) on main screen
         MainActivity.showTrafficLightStatus();
         MainActivity.showRiskStatus();
+
+        //calculate, update and save the risk level
+        RiskLevel riskLevel = new RiskLevel();
+
+        //Update the risk Level class with the saved parameters
+        riskLevel.setRiskLevel(LocalRiskLevelSafer.getRiskLevel());
+        riskLevel.setDaysSinceLastUpdate(LocalRiskLevelSafer.getDaysSinceLastContact());
+        //checking the daysSinceLastContact,
+        riskLevel.checkDaysSinceLastContact();
+
+        //calculate and update the riskLevel
+        riskLevel.updateRiskLevel(riskLevel.calculateRiskLevel(TypeOfExposureEnum.NO_CONTACT), true);
+
+        //Parameter hier müssen noch auf die schlüssel des Servers angepasst werden!
+        //bis jetzt wird jeden Tag so getan als wären keine Schlüssel vorhanden.
+        //Dazu muss man lediglich die beiden Parameter wie in folgender Zeile den wirklichen Schlüsseln anpassen:
+        // riskLevel.updateRiskLevel(RiskLevel.calculateRiskLevel(TypeOfExposureEnum.LONG_EXPOSURE_DIRECT_CONTACT, AmountOfContactsEnum.FEW), true);
+
+        // In den Klassen der Enums werden die Möglichkeiten klassifiziert und erklärt.
+
+
+        //save the risk level and the daysSinceLastContact
+        LocalRiskLevelSafer.safeRiskLevel(riskLevel.getRiskLevel());
+        LocalRiskLevelSafer.safeDaysSinceLastContact(riskLevel.getDaysSinceLastUpdate());
     }
 }
Index: app/src/main/java/de/monokel/frontend/risklevel/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/de/monokel/frontend/risklevel/Main.java	(date 1604335467805)
+++ app/src/main/java/de/monokel/frontend/risklevel/Main.java	(date 1604335467805)
@@ -0,0 +1,25 @@
+package de.monokel.frontend.risklevel;
+
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.SortedSet;
+import java.util.TreeSet;
+
+/**
+ * Main Klasse um die Funktion von Risklevel zu testen
+ *
+ * @author Jonas
+ * 29.10.2020
+ */
+public class Main {
+
+
+    public static void main(String[] args) {
+
+
+    }
+
+
+}
+
Index: app/src/main/java/de/monokel/frontend/risklevel/AmountOfContactsEnum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/de/monokel/frontend/risklevel/AmountOfContactsEnum.java	(date 1604335080386)
+++ app/src/main/java/de/monokel/frontend/risklevel/AmountOfContactsEnum.java	(date 1604335080386)
@@ -0,0 +1,11 @@
+package de.monokel.frontend.risklevel;
+
+/**
+ * Einfaches Enum zur Klassifizierung wie oft etwas stattgefunden hat:
+ * <p>
+ * FEW: 1 bis wenige Fälle
+ * SOME: wenige bis einige Fälle
+ * MANY: einige bis viele Fälle
+ */
+
+public enum AmountOfContactsEnum {FEW, SOME, MANY}
Index: app/src/main/java/de/monokel/frontend/risklevel/RiskLevel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/de/monokel/frontend/risklevel/RiskLevel.java	(date 1604349256645)
+++ app/src/main/java/de/monokel/frontend/risklevel/RiskLevel.java	(date 1604349256645)
@@ -0,0 +1,174 @@
+package de.monokel.frontend.risklevel;
+
+
+import java.util.Collections;
+import java.util.SortedSet;
+import java.util.TreeSet;
+
+import de.monokel.frontend.provider.LocalRiskLevelSafer;
+
+/**
+ * Klasse mit allen Operationen welche das Risikolevel betreffen.
+ * Das Risikolevel ist ein Wert zwischen 0 und 100.
+ * Er soll immer jeden Tag aktualisiert werden, oder wenn eine Infektionsmeldung durchgeführt wurde
+ *
+ * @author jonas
+ * @date 26.10.2020
+ */
+
+
+public class RiskLevel {
+
+    private int riskLevel;
+    private int daysSinceLastUpdate;
+
+
+    public void RiskLevel(int riskLevel) {
+        if (riskLevel < 0 || riskLevel > 100) {
+            throw new IllegalArgumentException();
+        } else {
+            this.riskLevel = riskLevel;
+        }
+    }
+
+    public int getRiskLevel() {
+        return riskLevel;
+    }
+
+    public int getDaysSinceLastUpdate() {
+        return daysSinceLastUpdate;
+    }
+
+    /**
+     * Methode zur Aktualisierung des Risikolevels.
+     *
+     * @param newRiskLevel  ist das neue Risikolevel, sollte übergeben werden durch die Methode calculateRiskLevel.
+     * @param isDailyUpdate (true/1:) Gibt an ob es sich um die tägliche Aktualisierung handelt, oder um den anderen Fall,(false/0:) dass es sich um eine Aktualisierung aufgrund einer Infektionsmeldung handelt.
+     */
+    public void updateRiskLevel(int newRiskLevel, boolean isDailyUpdate) {
+        if (this.riskLevel < 0 || this.riskLevel > 100) {
+            throw new IllegalArgumentException("Illegal Risk Level: must be an int value between 0 and 100!");
+
+        } else if (this.riskLevel > newRiskLevel || isDailyUpdate) {
+            daysSinceLastUpdate = daysSinceLastUpdate + 1;
+
+        } else if (this.riskLevel > newRiskLevel || !isDailyUpdate) {
+
+        } else if (this.riskLevel < newRiskLevel || isDailyUpdate) {
+            setRiskLevel(newRiskLevel);
+            resetDaysSinceLastContact();
+        } else if (this.riskLevel < newRiskLevel || !isDailyUpdate) {
+            setRiskLevel(newRiskLevel);
+            resetDaysSinceLastContact();
+        }
+    }
+
+    /**
+     * gleiche Methode wie die daurauffolgende, nur ohne den 2. Parameter, da dieser hier nicht berücksichtig werden muss.
+     *
+     * @param action Aktion welche beim berechnen des Risikolevels berücktsichtigt werden soll, hier wird jedoch nur ein NO_CONTACT berücktsicht, für alle anderen Fälle muss die darauffolgende Methode verwendet werden!(Diese hat einen weiteren Enum Parameter)
+     */
+
+    public static int calculateRiskLevel(TypeOfExposureEnum action) {
+        if (action == TypeOfExposureEnum.NO_CONTACT) {
+
+
+            checkDaysSinceLastContact();
+        }
+        return 0;
+    }
+
+    /**
+     * Methode zum berechnen des Risikolevels anhand der übergebenen Aktion
+     *
+     * @param action Art der Aktion welche eine Infektion zur Folge haben könnte
+     * @param amount Anzahl wie oft die zuvor genannte Aktion stattgefunden, z.B.: es wurden 1-wenige Schlüssel ausgetauscht, es wurden wenige - einige Schlüssel ausgetauscht oder eben einige bis viele Schlüssel ausgetauscht.
+     * @return berechneter Wert des Risikolevels
+     */
+
+
+    public int calculateRiskLevel(TypeOfExposureEnum action, AmountOfContactsEnum amount) {
+
+        int localRiskLevel = 101;
+
+        if (action == TypeOfExposureEnum.SHORT_EXPOSURE_INDIRECT_CONTACT || amount == AmountOfContactsEnum.FEW) {
+            localRiskLevel = 20;
+
+        } else if (action == TypeOfExposureEnum.SHORT_EXPOSURE_INDIRECT_CONTACT || amount == AmountOfContactsEnum.SOME) {
+            localRiskLevel = 30;
+        } else if (action == TypeOfExposureEnum.SHORT_EXPOSURE_INDIRECT_CONTACT || amount == AmountOfContactsEnum.MANY) {
+            localRiskLevel = 35;
+
+
+        } else if (action == TypeOfExposureEnum.LONG_EXPOSURE_INDIRECT_CONTACT || amount == AmountOfContactsEnum.FEW) {
+            localRiskLevel = 40;
+        } else if (action == TypeOfExposureEnum.LONG_EXPOSURE_INDIRECT_CONTACT || amount == AmountOfContactsEnum.SOME) {
+            localRiskLevel = 50;
+        } else if (action == TypeOfExposureEnum.LONG_EXPOSURE_INDIRECT_CONTACT || amount == AmountOfContactsEnum.SOME) {
+            localRiskLevel = 60;
+
+
+        } else if (action == TypeOfExposureEnum.SHORT_EXPOSURE_DIRECT_CONTACT || amount == AmountOfContactsEnum.FEW) {
+            localRiskLevel = 90;
+        } else if (action == TypeOfExposureEnum.SHORT_EXPOSURE_DIRECT_CONTACT || amount == AmountOfContactsEnum.SOME) {
+            localRiskLevel = 95;
+        } else if (action == TypeOfExposureEnum.SHORT_EXPOSURE_DIRECT_CONTACT || amount == AmountOfContactsEnum.MANY) {
+            localRiskLevel = 97;
+
+
+        } else if (action == TypeOfExposureEnum.LONG_EXPOSURE_DIRECT_CONTACT || amount == AmountOfContactsEnum.FEW) {
+            localRiskLevel = 96;
+        } else if (action == TypeOfExposureEnum.LONG_EXPOSURE_DIRECT_CONTACT || amount == AmountOfContactsEnum.SOME) {
+            localRiskLevel = 98;
+        } else if (action == TypeOfExposureEnum.LONG_EXPOSURE_DIRECT_CONTACT || amount == AmountOfContactsEnum.MANY) {
+            localRiskLevel = 100;
+        }
+
+        return localRiskLevel;
+
+    }
+
+    public void setRiskLevel(int newRiskLevel) {
+        this.riskLevel = newRiskLevel;
+
+    }
+
+    public void setDaysSinceLastUpdate(int newDaysSinceLastUpdate) {
+        this.daysSinceLastUpdate = newDaysSinceLastUpdate;
+    }
+
+
+    public void resetDaysSinceLastContact() {
+        daysSinceLastUpdate = 0;
+    }
+
+    public static void checkDaysSinceLastContact() {
+        int daysSinceLastUpdate = LocalRiskLevelSafer.getDaysSinceLastContact();
+
+        if (daysSinceLastUpdate > 14) {
+            LocalRiskLevelSafer.safeRiskLevel(0);
+
+        }
+    }
+
+    /*
+
+
+    public void checkRiskLevel(){
+
+        if(riskLevel < 33 || riskLevel >= 0){
+            this.riskLevelString = "Low Risk Level!";
+            }
+        if(riskLevel < 67 || riskLevel > 33){
+            this.riskLevelString = "Medium Risk Level!";
+             }
+        if(riskLevel < 101 || riskLevel > 66){
+            this.riskLevelString = "High Risk Level!";
+        }
+            }
+
+     */
+}
+
+
+
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>include ':app'\r\nrootProject.name = \"frontend\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- settings.gradle	(revision e4618ad821391a3f21e7e4248b8078a2cf3ba725)
+++ settings.gradle	(date 1604335080358)
@@ -1,2 +1,3 @@
+include ':jonasLib'
 include ':app'
 rootProject.name = "frontend"
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleHome\" value=\"$PROJECT_DIR$/../../../../Program Files/Gradle/gradle-6.3\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n        <option name=\"useQualifiedModuleNames\" value=\"true\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision e4618ad821391a3f21e7e4248b8078a2cf3ba725)
+++ .idea/gradle.xml	(date 1604335080374)
@@ -13,6 +13,7 @@
           <set>
             <option value="$PROJECT_DIR$" />
             <option value="$PROJECT_DIR$/app" />
+            <option value="$PROJECT_DIR$/jonasLib" />
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
Index: app/src/main/java/de/monokel/frontend/risklevel/TypeOfExposureEnum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/de/monokel/frontend/risklevel/TypeOfExposureEnum.java	(date 1604335080394)
+++ app/src/main/java/de/monokel/frontend/risklevel/TypeOfExposureEnum.java	(date 1604335080394)
@@ -0,0 +1,13 @@
+package de.monokel.frontend.risklevel;
+
+/**
+ * Enum zur Klassifizierung der Art wie eine Übertragung stattgefunden haben könnte.
+ * Direct contact stellt einen Kontakt mit einer als infiziert gemeldeten Person da.
+ * Indirect Contact stellt einen Kontakt mit einer nicht als infiziert gemeldeten Person da. *
+ * Long und Short Exposure stellen dar ob es sich um lange oder kurze, bzw. entsprechend viele oder wenige Schlüssel ausgetauscht wurden.
+ *
+ * @author jonas
+ * 26.10.2020
+ */
+
+public enum TypeOfExposureEnum {LONG_EXPOSURE_DIRECT_CONTACT, SHORT_EXPOSURE_DIRECT_CONTACT, LONG_EXPOSURE_INDIRECT_CONTACT, SHORT_EXPOSURE_INDIRECT_CONTACT, NO_CONTACT}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision e4618ad821391a3f21e7e4248b8078a2cf3ba725)
+++ .idea/misc.xml	(date 1604335080413)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"1.8\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision e4618ad821391a3f21e7e4248b8078a2cf3ba725)
+++ .idea/compiler.xml	(date 1604335080428)
@@ -1,6 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="1.8" />
+    <bytecodeTargetLevel target="1.7">
+      <module name="frontend.app" target="1.8" />
+    </bytecodeTargetLevel>
   </component>
 </project>
\ No newline at end of file
